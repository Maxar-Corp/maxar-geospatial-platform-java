package io.github.maxar.MGPSDK;

import com.google.gson.Gson;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Call;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 *  Object generated by {@link Builder} that allows the user to make OGC compliant calls
 */
abstract class Ogc {

    private final Auth AUTH;
    private String bbox;
    private String filter;
    private String rawFilter;
    private boolean shapeFile;
    private boolean csv;
    private String typeName;
    private String srsname;
    private final int HEIGHT;
    private final int WIDTH;
    private String layer;
    private final String IMAGE_FORMAT;
    private final String FEATURE_ID;
    private final int ZOOM_LEVEL;
    private boolean download;
    private final String LEGACY_ID;
    private final int THREAD_NUMBER;
    private String fileName;
    private String downloadPath;
    private final String REQUEST_TYPE;
    private final boolean DISPLAY;
    private String paramsImageFormat;
    private String endpoint;

    /**
     * Grabs the current instance of the {@link Auth} class to pass the token into the calls
     * @return Auth object containing token and URL information
     */
    Auth getAUTH() {
        return AUTH;
    }

    /**
     * Gets the bounding box
     * @return String containing the bounding box in yx order
     */
    String getBbox() {
        return bbox;
    }

    /**
     * Allows for overriding the bbox after the object is created
     * @param bbox String containing the bbox
     */
    public void setBbox(String bbox) {
        this.bbox = bbox;
    }

    /**
     * Gets the filter
     * @return String containing the CQL filter
     */
    String getFilter() {
        return filter;
    }

    /**
     * allows for overriding the filter after the object is created
     * @param filter String containing the filter
     */
    public void setFilter(String filter) {
        this.filter = filter;
    }

    /**
     * Gets the value stored to determine if the call requests a shape file
     * @return boolean representation of shapefile
     */
    boolean isShapeFile() {
        return shapeFile;
    }

    void setShapeFile(boolean shapeFile) {
        this.shapeFile = shapeFile;
    }

    void setCsv(boolean csv) {
        this.csv = csv;
    }

    /**
     * Gets the boolean value stored to determine if the call requests a csv file download
     * @return boolean representation of csv
     */
    boolean isCsv() {
        return csv;
    }

    /**
     * Gets the typeName, used if not using the default Maxar:FinishedFeature
     * @return String containing desired typeName
     */
    String getTypeName() {
        return typeName;
    }

    /**
     * Allows for overwriting the typename after the object has been created
     * @param typename String containing the typename
     */
    public void setTypename(String typename) {
        this.typeName = typename;
    }

    /**
     * Gets the value stored for srsName. For example, EPSG:3857
     * @return String containing srsName
     */
    String getSrsname() {
        return srsname;
    }

    /**
     * Sets the srsName if it needs to be overridden after build
     * @param srsname String containing srsname
     */
    void setSrsname(String srsname) {
        this.srsname = srsname;
    }

    /**
     * Gets height value stored for requested image dimensions in pixels
     * @return int value for height
     */
    int getHEIGHT() {
        return HEIGHT;
    }

    /**
     * Gets width value stored for requested image dimensions in pixels
     * @return int value for width
     */
    int getWIDTH() {
        return WIDTH;
    }

    /**
     * Gets the layer set by the user
     * @return String value for layer
     */
    String getLayer() {
        return layer;
    }

    /**
     * Allows for overriding the layer after the object is created
     * @param layer String containing the layer
     */
    public void setLayer(String layer) {
        this.layer = layer;
    }

    /**
     * Gets image format set for desired image return from WMS and WMTS calls.
     * @return String containing
     */
    String getIMAGE_FORMAT() {
        return IMAGE_FORMAT;
    }

    /**
     * Gets the featureId that can be used in all searches
     * @return String containing the featureId
     */
    String getFEATURE_ID() {
        return FEATURE_ID;
    }

    /**
     * Gets the selected zoom level
     * @return int value containing the zoom level
     */
    int getZOOM_LEVEL() {
        return ZOOM_LEVEL;
    }

    /**
     * Gets boolean indicated if the call should return a download
     * @return boolean determining if download
     */
    boolean isDownload() {
        return download;
    }

    /**
     * Sets the boolean to override builder value
     */
    void setDownload() {
        this.download = true;
    }

    /**
     * Gets the legacyId set by the builder
     * @return String containing the legacyId
     */
    String getLEGACY_ID() {
        return LEGACY_ID;
    }

    /**
     * Gets the number of threads to use for multithreading
     * @return int value indicating number of threads
     */
    int getTHREAD_NUMBER() {
        return THREAD_NUMBER;
    }

    /**
     * Gets the download path set from the builder
     * @return String containing the download path
     */
    String getDownloadPath() {
        return downloadPath;
    }

    /**
     * Sets the download path for any files that need to be downloaded to the user's machine
     * @param downloadPath String containing a full directory path
     */
    void setDownloadPath(String downloadPath) {
        this.downloadPath = downloadPath;
    }

    /**
     * Gets the request type set from the builder
     * @return String containing the request type
     */
    String getREQUEST_TYPE() {
        return REQUEST_TYPE;
    }

    /**
     * Gets boolean indicating whether the image returned from the server will be displayed
     * @return boolean determining display state
     */
    boolean isDISPLAY() {
        return DISPLAY;
    }

    /**
     * Sets the filename if it needs to be overridden from the builder
     * @param fileName String containing the new filename
     */
    void setFileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Gets the filename set by the builder
     * @return String containing the filename
     */
    String getFileName() {
        return fileName;
    }

    /**
     * Gets result stored after validating the image format
     * @return String containing image/format
     */
    String getParamsImageFormat() {
        return this.paramsImageFormat;
    }

    /**
     * Prepends the {@link #getIMAGE_FORMAT()} with "image/" needed for the API call. Set after
     * {@link OgcUtils#validateImageFormat(Ogc)}
     * @param paramsImageFormat String containing format prepended with "image/"
     */
    void setParamsImageFormat(String paramsImageFormat) {
        this.paramsImageFormat = paramsImageFormat;
    }

    /**
     * Required to determine the child class that is calling. Used for certain methods that call
     * different URLs depending on endpoint
     * @return String of child's endpoint
     */
    String getENDPOINT() {
        return endpoint;
    }

    /**
     * Allows children to set their own endpoint
      * @param endpoint String containing endpoint
     */
    void setEndpoint(String endpoint) {
        this.endpoint = endpoint;
    }

    /**
     * <p>Builder for new instances of {@link Streaming}</p>
     * <p>No fields are mandatory when {@link #build()} is called. Each <code>Streaming</code> method will
     *  have its own requirements that need to be set for each call. Each method will return a
     *  {@link IllegalArgumentException} if required parameter are not set. Each builder method
     *  returns a {@link Builder} so that method calls can be chained until {@link #build()}
     *  is finally called which will then return a completed <code>Streaming</code></p>
     *  <p>Some attributes will be used more often than others. For example:</p>
     *  <ul>
     *      <li>{@link #bbox(String)}</li>
     *      <li>{@link #filter(String)}</li>
     *  </ul>
     */
    static abstract class Builder<T extends Builder<T>> {
        Auth auth;
        String username;
        String password;
        String clientId;
        private String bbox;
        private String rawFilter;
        ArrayList<String> filterList = new ArrayList<>();
        private boolean shapefile;
        private boolean csv;
        private String typeName;
        private String srsname;
        private int height;
        private int width;
        private String imageFormat;
        private String layer;
        private String featureId;
        private int zoomLevel;
        private boolean download;
        private String legacyId;
        private int threadNumber;
        private String fileName;
        private String downloadPath;
        private String requestType;
        private boolean display;

        /**
         * Sets the username. If provided, {@link #password} and {@link #clientId} also need to be used
         * @param username String containing the username
         * @return {@link Builder}
         */
        public T username(String username) {
            this.username = username;
            return self();
        }

        /**
         * Sets the password. If provided, {@link #username} and {@link #clientId} also need to be used
         * @param password String containing the password
         * @return {@link Builder}
         */
        public T password(String password) {
            this.password = password;
            return self();
        }

        /**
         * Sets the clientId. If provided, {@link #username} and {@link #password} also need to be used
         * @param clientId String containing the clientId
         * @return {@link Builder}
         */
        public T clientId(String clientId) {
            this.clientId = clientId;
            return self();
        }

        /**
         * Sets the bbox to be used for calls in yx format. Can be in any OGC compliant projection.
         * Projection defaults to EPSG:4326. If another projection is used, it must be indicated with
         * {@link #srsname(String)}
         * @param bbox String containing the bbox in yx format. example: "39.84387,-105.05608,39.95133,-104.94827"
         * @return {@link Builder}
         */
        public T bbox(String bbox) {
            this.bbox = bbox;
            return self();
        }

        /**
         * Any number of .filter() can be called to add more filters, final filter will be separated
         * with AND. For a custom filter, use .rawFilter()
         * @param filter String containing the CQL filter
         * @return {@link Builder}
         */
        public T filter(String filter) {
            this.filterList.add(filter);
            return self();
        }

        /**
         * Used when wanting to use a more customized filter that .filter() does not support
         * @param filter String containing the raw filter
         * @return {@link Builder}
         */
        public T rawFilter(String filter) {
            this.rawFilter = filter;
            return self();
        }

        /**
         * Sets a boolean value of true indicating a call should return a shapefile
         * @return {@link Builder}
         */
        public T shapefile() {
            this.shapefile = true;
            return self();
        }

        /**
         * Sets a boolean value of true indicating a call should return a csv file
         * @return {@link Builder}
         */
        public T csv() {
            this.csv = true;
            return self();
        }

        /**
         * Sets the desired typename. Defaults to Maxar:FinishedFeature. The other two available options
         * are Maxar:VectorFeatures and Maxar:RasterFeature
         * @param typeName String containing the desired typename
         * @return {@link Builder}
         */
        public T typeName(String typeName) {
            this.typeName = typeName;
            return self();
        }

        /**
         * Sets the projection. Only used if using a metered projection. If unused, all calls will
         * default to a EPSG:4326 projection
         * @param srsname String containing desired projection. Example: "EPSG:3857"
         * @return {@link Builder}
         */
        public T srsname(String srsname) {
            this.srsname = srsname;
            return self();
        }

        /**
         * Sets the height for an image return. Required for WMS calls
         * Height is a measure of pixels. Maximum height is 8000. Recommended max is 6000
         * @param height int containing the height value in pixels
         * @return {@link Builder}
         */
        public T height(int height) {
            this.height = height;
            return self();
        }

        /**
         * Sets the width for an image return. Required for WMS call
         * Width is a measure of pixels. Maximum width is 8000. Recommended max is 6000
         * @param width int containing the height value in pixels
         * @return {@link Builder}
         */
        public T width(int width) {
            this.width = width;
            return self();
        }

        /**
         * Sets the image format for image downloads. Required when using {@link #download()}. Options
         * include:
         * <ul>
         *     <li>jpeg</li>
         *     <li>png</li>
         *     <li>geotiff</li>
         * </ul>
         * @param imageFormat String containing desired format
         * @return {@link Builder}
         */
        public T imageFormat(String imageFormat) {
            this.imageFormat = imageFormat;
            return self();
        }

        /**
         * Sets the layer to be used in calls
         * @param layer String containing the layer
         * @return {@link Builder}
         */
        public T layer(String layer) {
            this.layer = layer;
            return self();
        }

        /**
         * Sets the featureId to be used for calls
         * @param featureId String containing the featureId
         * @return {@link Builder}
         */
        public T featureId(String featureId) {
            this.featureId = featureId;
            return self();
        }

        /**
         * Sets the zoom level to be used. Required for WMTS calls. Example: {@link #downloadTiles()}
         * @param zoomLevel int of zoom level. Valid input is 3 - 20
         * @return {@link Builder}
         */
        public T zoomLevel(int zoomLevel) {
            this.zoomLevel = zoomLevel;
            return self();
        }

        /**
         * Sets boolean true for whether an image call should be downloaded to the users machine.
         * If not selected, an image return call will return the response body of the API call
         * @return {@link Builder}
         */
        public T download() {
            this.download = true;
            return self();
        }

        /**
         * Sets the desired legacy ID for a call. Legacy IDs are used for calls to api.discover.digitalglobe.com
         * @param legacyId String containing the legacy ID
         * @return {@link Builder}
         */
        public T legacyId(String legacyId) {
            this.legacyId = legacyId;
            return self();
        }

        /**
         * Sets the number of threads to use for multithreading. Required for
         * {@link Streaming#getFullResImage()}}.
         * Recommended to use 50 - 100 threads. Local testing is recommended to determine a good
         * speed / success ratio
         * @param threadNumber int indicating the number of threads to use
         * @return {@link Builder}
         */
        public T threadNumber(int threadNumber) {
            this.threadNumber = threadNumber;
            return self();
        }

        /**
         * Sets the desired filename if .download() is used. Defaults to "Download"
         * @param fileName String containing the filename
         * @return {@link Builder}
         */
        public T fileName(String fileName) {
            this.fileName = fileName;
            return self();
        }

        /**
         * Sets the desired download path if .download() is used. Defaults to the user's
         * download directory. Must be a full path
         * @param downloadPath String containing the download path
         * @return {@link Builder}
         */
        public T downloadPath(String downloadPath) {
            this.downloadPath = downloadPath;
            return self();
        }

        /**
         * Sets the desired request type to be used for OGC calls. Defaults include GetFeature for
         * WFS calls, GetMap for WMS calls, and GetTile for WMTS calls
         * @param requestType String containing desired request type
         * @return {@link Builder}
         */
        public T requestType(String requestType) {
            this.requestType = requestType;
            return self();
        }

        /**
         * Sets the boolean true for whether a fetched image is displayed to the screen. Used for
         * WMS and WMTS calls. Package will use Jframe to display an image
         * @return {@link Builder}
         */
        public T display() {
            this.display = true;
            return self();
        }

        /**
         * Called at the end of the chained builder method. Used to return a built child
         * object for making OGC calls
         * @return <code>OGC</code>
         * @throws IllegalArgumentException if Auth is not set properly
         */
        abstract Ogc build();

        /**
         * Self method helps child classes return abstract builders
         * @return {@link Builder}
         */
        protected abstract T self ();
    }

    /**
     * Creates an instance of Portal. Can only be instantiated using {@link Builder}
     * @param builder instance of <code>Builder</code>} class
     */
    protected Ogc(Builder<?> builder) {
        this.AUTH = builder.auth;
        this.bbox = builder.bbox;
        this.filter = builder.rawFilter;
        this.shapeFile = builder.shapefile;
        this.csv = builder.csv;
        this.typeName = builder.typeName;
        this.srsname = builder.srsname;
        this.HEIGHT = builder.height;
        this.WIDTH = builder.width;
        this.IMAGE_FORMAT = builder.imageFormat;
        this.layer = builder.layer;
        this.FEATURE_ID = builder.featureId;
        this.ZOOM_LEVEL = builder.zoomLevel;
        this.download = builder.download;
        this.LEGACY_ID = builder.legacyId;
        this.THREAD_NUMBER = builder.threadNumber;
        this.fileName = builder.fileName;
        this.downloadPath = builder.downloadPath;
        this.REQUEST_TYPE = builder.requestType;
        this.DISPLAY = builder.display;
    }

    /**
     * Searches using the WFS method
     * @return String containing the GeoJson result
     * @throws IllegalArgumentException if CQL filter fails check, or if builder parameters are incorrect
     */
    public String searchToString() {
        Wfs wfs = new Wfs(this);
        if (this.getFilter() != null) {
            OgcUtils.cqlChecker(this.getFilter());
        }
        Response wfsResults = wfs.search();
        String results = null;
        try {
            assert wfsResults.body() != null;
            results = wfsResults.body().string();
        } catch (IOException e) {
            results = "okHttp3 exception. Please try again";
        }
        return results;
    }

    /**
     * Searches using the WMS method. API returns a blob containing the image result. An image can
     * be built and downloaded using {@link Builder#download()} or displayed using
     * {@link Builder#display()}. Otherwise, method will return a String containing the
     * blob result
     * @return String containing image blob result or status of download / display
     * @throws IllegalArgumentException if builder parameters are not set correctly
     */
    public String downloadImage() throws IllegalArgumentException {

        Wms wms = new Wms(this);
        String result;
        int height = this.getHEIGHT();
        int width = this.getWIDTH();
        OgcUtils.validateImageFormat(this);
        ///If legacy ID
        if (this.getLEGACY_ID() != null) {
            String legacyId = this.getLEGACY_ID();
            String URL = "https://api.discover.digitalglobe.com/show?id=" + legacyId;
            OkHttpClient client = new OkHttpClient().newBuilder().build();
            Request okRequest = new Request.Builder()
                .url(URL)
                .build();
            Call call = client.newCall(okRequest);
            Response response = null;
            try {
                response = call.execute();
            } catch (IOException ioe) {
                System.out.println("okHttp3 exception: " + ioe + " please try again");
                System.exit(-1);
            }
            assert response.body() != null;
            InputStream picture = response.body().byteStream();
            return OgcUtils.handleImageReturn(this, response);

        } else {
            if (this.getBbox() == null || this.getIMAGE_FORMAT() == null || ((Number) height).doubleValue() == 0 || ((Number) width).doubleValue() == 0) {
                throw new IllegalArgumentException("Downloads must have a bbox an image format a height and a width");
            } else {
                OgcUtils.validateBbox(this);
                if (width < 0 || width > 8000) {
                    throw new IllegalArgumentException("Invalid value for width parameter (max 8000)");
                }
                if (height < 0 || height > 8000) {
                    throw new IllegalArgumentException("Invalid value for height parameter (max 8000)");
                }
                return wms.returnImage();
            }
        }
    }

    /**
     * Searches using the WFS method. Downloads CSV file to the user's downloads director unless
     * overwritten with {@link #setDownloadPath(String)}
     * @return String containing the location of the downloaded file
     */
    public String downloadCsv() {
        Wfs wfs = new Wfs(this);
        this.setCsv(true);
        this.setDownload();
        if (this.getFilter() != null) {
            OgcUtils.cqlChecker(this.getFilter());
        }
        Response wfsResults = wfs.search();
        return OgcUtils.handleImageReturn(this, wfsResults);
    }

    /**
     * Searches using the WFS method. Downloads shapefile to the user's downloads director unless
     * overwritten with {@link #setDownloadPath(String)}
     * @return String containing the location of the downloaded file
     */
    public String downloadShapeFile() {
        Wfs wfs = new Wfs(this);
        this.setShapeFile(true);
        this.setDownload();
        if (this.getFilter() != null) {
            OgcUtils.cqlChecker(this.getFilter());
        }
        Response wfsResults = wfs.search();
        return OgcUtils.handleImageReturn(this, wfsResults);
    }


    /**
     * Returns a list of WMTS calls that can be used to acquire all the wmts tiles. bbox and
     * zoom level must be set with {@link Builder#bbox(String)} and
     * {@link Builder#zoomLevel(int)}
     * @return HashMap&lt;String, String&gt; containing a list of WMTS calls
     * @throws IllegalArgumentException if builder parameters are not set correctly
     */
    public HashMap<String, String> getTileList() throws IllegalArgumentException {

        Wmts wmts = new Wmts(this);
        OgcUtils.validateBbox(this);
        if (this.getSrsname() == null) {
            this.setSrsname("EPSG:4326");
        }
        return wmts.wmtsBboxGetTileList(this);
    }

    /**
     * Downloads all tiles within a bbox dependent on zoom level. Prints message displaying location
     * of the downloaded tiles.
     * @throws IllegalArgumentException if builder parameters are not set correctly
     */
    public void downloadTiles() throws IllegalArgumentException {

        Wmts wmts = new Wmts(this);
        String baseFile;
        baseFile = this.getFileName() != null ? this.getFileName() : "download";
        OgcUtils.validateImageFormat(this);
        if (this.getSrsname() == null) {
            this.setSrsname("EPSG:4326");
        }
        HashMap<String, String> wmtsList = this.getTileList();
        for (Map.Entry<String, String> set : wmtsList.entrySet()) {
            String[] params = set.getKey().replaceAll("\\[", "")
                .replaceAll("\\]", "").replaceAll(" ", "").split(",");
            Response response = wmts.wmtsGetTile(params[0], params[1], params[2]);
            this.setFileName(String.format("%s_%s_%s_%s", baseFile, params[0], params[1], params[2]));
            OgcUtils.handleImageReturn(this, response);
        }
    }

    /**
     * Runs a batch of WMS requests from a csv file. Csv file should be a list of yx order
     * bboxes. Filename and location must be set with {@link Builder#fileName(String)}
     * {@link Builder#downloadPath(String)} Projection should be noted with
     * {@link Builder#srsname(String)} if not EPSG:4326. Each bbox should be on its own line
     * @throws IllegalArgumentException if builder parameters are not set correctly
     */
    public void getImageFromCsv() {

        Wms wms = new Wms(this);
        wms.rerunFailedImages();
    }


}
